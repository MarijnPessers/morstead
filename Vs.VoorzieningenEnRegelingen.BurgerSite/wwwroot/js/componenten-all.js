/***************************
File generated by shrinker.ch
DateTime: 2020-02-13, 23:17:01
File list:
* button.js
* combobox.js
* checkbox.js
* collapse.js
* donut-chart.js
* filterlist.js
* modal.js
* navigation.js
* notification.js
* TableResponsive.js
* tabs.js
* tooltip.js
*****************************/
var utils_1 = require("/core/utils"), Button = function () {
    function c(a) { this.element = a; this.keyDownListener = this.onKeyDown.bind(this); a.addEventListener("keydown", this.keyDownListener); a.setAttribute("role", "button"); this.element.classList.contains("btn--disabled") || a.setAttribute("tabindex", "0") } c.prototype.destroy = function () { this.element.removeEventListener("keydown", this.keyDownListener) }; c.prototype.onKeyDown = function (a) {
        if (utils_1.Utils.IsKeyPressed(a, " ")) {
            a.preventDefault(); this.element.classList.contains("btn--disabled") ||
                (typeof this.element.click === "function" ? this.element.click() : this.element.dispatchEvent(new MouseEvent("click", { bubbles: true, cancelable: false, view: window })))
        }
    }; return c
}(); exports.Button = Button; utils_1 = require("/core/utils");
var ITEM_TEMPLATE = '<li role="button" tabindex="-1" class="combobox__item">\n <span class="combobox__link">%s</span>\n </li>', NO_RESULT_TEMPLATE = '<li tabindex="-1" class="combobox__item combobox__item--no-results" hidden>\n <span class="combobox__link">Geen resultaten gevonden.</span>\n</li>', ITEM_COMBOBOX_TEMPLATE = '<li class="input__group input__group--compact input__group--checkbox" role="group">\n<input role=checkbox type="checkbox" id="chkbx-compact-$id" class="input__control input__control--checkbox">\n<label class="input__label input__label--checkbox combobox__link" for="chkbx-compact-$id">$label</label>\n</li>',
    DATAFIELD = "comboboxItem"; exports.MODE_FILTER = 1; exports.MODE_AUTOCOMPLETE = 2;
var Combobox = function () {
    function c(a, b) { if (b === void 0) b = false; this.host = a; this.isCheckboxFilter = b; this._allowUnknown = true; this._filterFunction = this.defaultFilter; this._initTimeout = 2; this._inputTimeout = 100; this._labelFunction = this.defaultLabel; this._loading = false; this._mode = exports.MODE_FILTER; this._validationError = "Ongeldige invoer"; this._filterContainer = this._value = null; this._highlight = true; if (!a) throw Error("No host element specified"); this.setup(); this.setupListeners() } Object.defineProperty(c.prototype,
        "allowUnknown", { get: function () { return this._allowUnknown }, set: function (a) { this._allowUnknown = a }, enumerable: true, configurable: true }); Object.defineProperty(c.prototype, "data", { get: function () { return this._data }, set: function (a) { this._data = a; this.initialize() }, enumerable: true, configurable: true }); Object.defineProperty(c.prototype, "filterFunction", { get: function () { return this._filterFunction }, set: function (a) { this._highlight = false; this._filterFunction = a }, enumerable: true, configurable: true }); Object.defineProperty(c.prototype,
            "inputTimeout", { get: function () { return this._inputTimeout }, set: function (a) { this._inputTimeout = a }, enumerable: true, configurable: true }); Object.defineProperty(c.prototype, "labelField", { get: function () { return this._labelField }, set: function (a) { this._labelField = a; this.initialize() }, enumerable: true, configurable: true }); Object.defineProperty(c.prototype, "labelFunction", { get: function () { return this._labelFunction }, set: function (a) { this._labelFunction = a; this.initialize() }, enumerable: true, configurable: true }); Object.defineProperty(c.prototype,
                "loading", { get: function () { return this._loading }, set: function (a) { this._loading = a; if (this._icon) this._icon.classList[a ? "add" : "remove"]("combobox__icon--loading") }, enumerable: true, configurable: true }); Object.defineProperty(c.prototype, "mode", { get: function () { return this._mode }, set: function (a) { this._mode = a }, enumerable: true, configurable: true }); Object.defineProperty(c.prototype, "validationError", { get: function () { return this._validationError }, set: function (a) { this._validationError = a }, enumerable: true, configurable: true });
    Object.defineProperty(c.prototype, "value", { get: function () { return this._value }, set: function (a) { if (!this.allowUnknown && this.data.indexOf(a) === -1) throw Error("Unknown item '" + a.toString() + "'"); this._value = a; var b = document.createElement("div"); b.innerHTML = this.labelFunction(a); this._input.value = b.textContent }, enumerable: true, configurable: true }); Object.defineProperty(c.prototype, "isOpen", { get: function () { return this.host.classList.contains("combobox--autocomplete-open") }, enumerable: true, configurable: true });
    Object.defineProperty(c.prototype, "query", { get: function () { return this._input ? this._input.value : undefined }, enumerable: true, configurable: true }); c.prototype.handleEvent = function (a) { switch (a.currentTarget) { case this._toggle: this["onToggle" + a.type](a); break; case this._list: if (!this.isCheckboxFilter) this["onList" + a.type](a); break; case this._input: this["onInput" + a.type](a); break; case document.body: this["onBody" + a.type](a) } }; c.prototype.open = function () {
        if (this.data) {
            var a = document.createEvent("CustomEvent");
            a.initEvent("combobox-open", true, true); if (this.host.dispatchEvent(a)) { if (!this.isOpen) this._prevQuery = null; this.host.classList.add("combobox--autocomplete-open"); this._list.hidden = false; this.filterInput() }
        }
    }; c.prototype.close = function () { if (this.isOpen) { var a = document.createEvent("CustomEvent"); a.initEvent("combobox-close", true, true); if (this.host.dispatchEvent(a)) { this.host.classList.remove("combobox--autocomplete-open"); this._list.hidden = true } } }; c.prototype.destroy = function () {
        this._toggle.removeEventListener("click",
            this); this._input.removeEventListener("keyup", this); this._input.removeEventListener("keydown", this); this._input.removeEventListener("input", this); this._list.removeEventListener("click", this); this._list.removeEventListener("keyup", this); this._list.removeEventListener("keydown", this); this._list.remove(); document.body.removeEventListener("click", this)
    }; c.prototype.createListItems = function () {
        var a = this; if (this.isCheckboxFilter) this.data.forEach(function (b, d) {
            var e = utils_1.Utils.CreateNode(ITEM_COMBOBOX_TEMPLATE.replace("$label",
                b.name).replace(/\$id/g, d.toString())); e[DATAFIELD] = b; e.querySelector("input").addEventListener("change", function () { a.buildFilterList() }); e.querySelector("input").addEventListener("keydown", function (f) { utils_1.Utils.IsKeyPressed(f, "Escape") && a.close(); if (utils_1.Utils.IsKeyPressed(f, "Tab")) { var g = a._list.querySelectorAll("input"); if (f.shiftKey) d === 0 && a.close(); else d >= g.length - 1 && a.close() } }); a._list.appendChild(e)
        }); else this.data && this.data.forEach(function (b) {
            var d = a.labelFunction(b); d = utils_1.Utils.CreateNode(ITEM_TEMPLATE.split("%s").join(d));
            d[DATAFIELD] = b; a._list.appendChild(d)
        })
    }; c.prototype.createNoResultItem = function () { this._list.appendChild(utils_1.Utils.CreateNode(NO_RESULT_TEMPLATE)) }; c.prototype.defaultFilter = function (a) { if (this.isCheckboxFilter) a = a.name; return a.toString().toLowerCase().indexOf(this.query.toLowerCase()) > -1 }; c.prototype.defaultLabel = function (a) { if (typeof a === "string") return a; else if (this.labelField && a.hasOwnProperty(this.labelField)) return a[this.labelField].toString(); return a.toString() }; c.prototype.filterInput =
        function () {
            var a = this; if (this.data) {
                window.clearTimeout(this._inputTimeoutId); this._inputTimeoutId = window.setTimeout(function () {
                    if (a._prevQuery !== a.query) {
                    a._prevQuery = a.query; a.data.filter(function (b, d, e) {
                        var f = a._list.children[d], g = f.querySelector(".combobox__link"); b = a.filterFunction.call(a, b, d, e); f.hidden = true; if (b) { f.hidden = false; if (a._highlight && a.query) g.innerHTML = g.textContent.split(a.query).join('<span class="combobox__match">' + a.query + "</span>") } else if (a._highlight) g.nodeValue = g.textContent;
                        return b
                    }).length ? a.hideNoResultItem() : a.showNoResultItem(); a.isOpen || a.open()
                    }
                }, this.inputTimeout)
            }
        }; c.prototype.showNoResultItem = function () { this._list.querySelector(".combobox__item--no-results").hidden = false; this._list.removeEventListener("click", this); this._list.removeEventListener("keyup", this); this._list.removeEventListener("keydown", this) }; c.prototype.hideNoResultItem = function () {
            this._list.querySelector(".combobox__item--no-results").hidden = true; this.isCheckboxFilter || this._list.addEventListener("click",
                this); this._list.addEventListener("keyup", this); this._list.addEventListener("keydown", this)
        }; c.prototype.focusNextItem = function (a) {
            if (a === void 0) a = 1; var b = document.activeElement; if (b.classList.contains("combobox__item") && utils_1.Utils.IsDescendant(b, this.host)) for (a = a === 1 ? "nextElementSibling" : "previousElementSibling"; b[a];) { b = b[a]; if (!b.hidden) { b.focus(); break } } else {
                b = this._list.querySelectorAll(".combobox__item"); a = 0; for (var d = b.length; a < d; a += 1) {
                    var e = b[a]; if (!e.hasAttribute("hidden")) {
                        e.focus();
                        break
                    }
                }
            }
        }; c.prototype.initialize = function () { var a = this; clearTimeout(this._initTimeoutId); this._initTimeoutId = window.setTimeout(function () { a.removeListItems(); a.createListItems(); a.createNoResultItem(); a.mode === exports.MODE_AUTOCOMPLETE && a.filterInput() }, this._initTimeout) }; c.prototype.onInputinput = function () { this.data && !this.allowUnknown && this.data.indexOf(this._input.value) === -1 ? this._input.setCustomValidity(this.validationError) : this._input.setCustomValidity("") }; c.prototype.onInputkeydown = function (a) { a.stopPropagation() };
    c.prototype.onInputkeyup = function (a) { if (utils_1.Utils.IsKeyPressed(a, "Escape")) return this.close(); else if (utils_1.Utils.IsKeyPressed(a, "ArrowDown") || utils_1.Utils.IsKeyPressed(a, "ArrowUp")) if (this.isOpen) this.focusNextItem(utils_1.Utils.IsKeyPressed(a, "ArrowDown") ? 1 : -1); else { this.open(); (a = this._list.querySelector(".combobox__item")) && a.focus() } if (this.mode === exports.MODE_FILTER) { this._value = null; this.filterInput() } }; c.prototype.onListclick = function (a) { this.setValue(this.findDataField(a.target)) };
    c.prototype.onBodyclick = function (a) { if (a.target !== this._input && a.target !== this._toggle && a.target !== this._icon && a.target !== this._list) this.isCheckboxFilter && this.findDataField(a.target) != null || this.close() }; c.prototype.findDataField = function (a) { for (; a && !a[DATAFIELD];)a = a.parentElement; return a && a[DATAFIELD] }; c.prototype.onListkeydown = function (a) { a.preventDefault(); a.stopPropagation() }; c.prototype.onListkeyup = function (a) {
        a.preventDefault(); if (utils_1.Utils.IsKeyPressed(a, "Escape")) {
        this._value = null;
            this.close()
        } else if (utils_1.Utils.IsKeyPressed(a, "ArrowDown") || utils_1.Utils.IsKeyPressed(a, "ArrowUp")) this.focusNextItem(utils_1.Utils.IsKeyPressed(a, "ArrowDown") ? 1 : -1); else if (utils_1.Utils.IsKeyPressed(a, "Enter")) { a = document.activeElement; a.classList.contains("combobox__item") && this.setValue(this.findDataField(a)) }
    }; c.prototype.onToggleclick = function () { if (this.isOpen) { this._value = null; this.close() } else this.open() }; c.prototype.updateFilterList = function (a) {
        var b = this, d = this.getFilterContainer();
        d.innerHTML = ""; for (var e = 0; e < a.length; e++) { var f = utils_1.Utils.CreateNode('<li tabindex="0">' + a[e] + "</li>"); f.id = e.toString(); f.addEventListener("click", function (g) { return b.onFilterLabelClick(g.target) }); f.addEventListener("keyup", function (g) { if (utils_1.Utils.IsKeyPressed(g, "Enter")) b.onFilterLabelClick(g.target) }); d.appendChild(f) }
    }; c.prototype.onFilterLabelClick = function (a) {
        if (this.isCheckboxFilter) {
            this._list.querySelectorAll(".input__control:checked")[a.id].checked = false; var b = this.getFilterContainer();
            this.buildFilterList(); if (b.querySelectorAll("li").length === 0) this._input.focus(); else { a = parseInt(a.id) > 0 ? parseInt(a.id) - 1 : 0; b.querySelectorAll("li")[a].focus() }
        }
    }; c.prototype.getFilterContainer = function () {
        if (this._filterContainer === null) {
        this._filterContainer = this.host.querySelector(".list--filter"); if (this._filterContainer === null) {
        this._filterContainer = utils_1.Utils.CreateNode('<ul class="list list--filter list--filter-inline list--filter-closable" ></ul>'); this.host.insertBefore(this._filterContainer,
            this.host.querySelector(".combobox__input"))
        }
        } return this._filterContainer
    }; c.prototype.buildFilterList = function () { this._value = []; for (var a = this._list.querySelectorAll(".input__control:checked"), b = 0; b < a.length; b++)this._value.push(a[b].parentElement.querySelector(".input__label").textContent); this.updateFilterList(this._value) }; c.prototype.setValue = function (a) {
        var b = document.createEvent("CustomEvent"); b.initEvent("combobox-select", true, true); b.data = a; if (!this.isCheckboxFilter && this.host.dispatchEvent(b)) {
        this.value =
            a; this.close()
        }
    }; c.prototype.setup = function () {
        if (!this.host.querySelector(".combobox__input")) throw Error("Host element should contain a text input"); this.host.classList.contains("combobox") || this.host.classList.add("combobox"); if (!this.host.querySelector(".combobox__icon")) { this._icon = utils_1.Utils.CreateNode('<i class="combobox__icon icon icon-magnifier" role="presentation"></i>'); this.host.appendChild(this._icon) } this._toggle = this.host.querySelector(".combobox__toggle"); if (!this._toggle) {
        this._toggle =
            utils_1.Utils.CreateNode('<button type="button" class="combobox__toggle"></button>'); this.host.appendChild(this._toggle)
        } this.host.querySelector(".combobox__autocomplete") || this.host.appendChild(utils_1.Utils.CreateNode('<div class="combobox__autocomplete">\n <div class="combobox__list-wrapper">\n <ul class="combobox__list" tabindex="0" hidden>\n </ul>\n </div>\n </div>')); this._list = this.host.querySelector(".combobox__list");
        if (this.isCheckboxFilter) { this._list.classList.add("combobox__list--multiple"); this._list.setAttribute("tabindex", "-1"); var a = this.host.querySelector(".combobox__input"); this._data = []; for (var b = 0; b < a.children.length; b++)this._data.push({ name: a.children[b].textContent, value: "" }); b = utils_1.Utils.CreateNode("<input ></a>"); b.className = a.className; this.host.replaceChild(b, a); this.createListItems(); this.createNoResultItem() } this._input = this.host.querySelector(".combobox__input")
    }; c.prototype.setupListeners =
        function () { this._toggle.addEventListener("click", this); this._input.addEventListener("keyup", this); this._input.addEventListener("keydown", this); this._input.addEventListener("input", this); this.isCheckboxFilter || this._list.addEventListener("click", this); this._list.addEventListener("keyup", this); this._list.addEventListener("keydown", this); document.body.addEventListener("click", this) }; c.prototype.removeListItems = function () { for (; this._list.lastChild;)this._list.removeChild(this._list.lastChild) }; return c
}();
exports.Combobox = Combobox; require("/core/polyfills");
var CheckboxGroup = function () {
    function c(a) { var b = this; this.container = a; if (this.container.nodeName.toLowerCase() === "ul" || this.container.nodeName.toLowerCase() === "table") this.container.querySelectorAll(".input__control--checkbox").forEach(function (d) { d.addEventListener("click", b) }); else throw Error("Incompatible element passed, expected <ul> or <table>, got " + this.container.nodeName); } c.prototype.destroy = function () { var a = this; this.container.querySelectorAll(".input__control--checkbox").forEach(function (b) { b.removeEventListener("click", a) }) };
    c.prototype.handleEvent = function (a) { if (a.type === "click") if (a.currentTarget.parentElement.nodeName.toLowerCase() === "li") this.onListCheckboxClick(a.currentTarget); else this.onTableCheckboxClick(a.currentTarget) }; c.prototype.onListCheckboxClick = function (a) {
        var b = a.parentElement; if (b.classList.contains("input__group--checkbox")) { var d = b.querySelector("ul"); d && d.querySelectorAll(".input__control--checkbox").forEach(function (f) { return f.checked = a.checked }) } else {
            for (; b && !b.classList.contains("input__group");)b =
                b.parentNode; if (b) { d = b.querySelector("ul"); b = b.querySelector(".input__control--checkbox"); var e = d.querySelectorAll(".input__control--checkbox").length; d = d.querySelectorAll(".input__control--checkbox:checked").length; b.checked = d > 0; b.indeterminate = d > 0 && d < e }
        }
    }; c.prototype.onTableCheckboxClick = function (a) {
        for (var b = a.parentElement; b && b.nodeName.toLowerCase() !== "table";)b = b.parentNode; var d = b.querySelectorAll(".input__control--checkbox"); if (b.querySelector(".input__control--checkbox") === a) d.forEach(function (f,
            g) { if (g > 0) f.checked = a.checked }); else { var e = d.length - 1; b = b.querySelectorAll("tbody .input__control--checkbox:checked").length; d.item(0).checked = b > 0; d.item(0).indeterminate = b > 0 && b < e }
    }; return c
}(); exports.CheckboxGroup = CheckboxGroup; var SlideToggle_1 = require("/core/animations/SlideToggle"); utils_1 = require("/core/utils");
var TOGGLE_CLASS = "collapse__details--open", TOGGLE_TITLE_CLASS = "collapse__title--open", Collapse = function () {
    function c(a) {
        var b = this; if (this.host = a) if (!this.host.hasOwnProperty("unoCollapse")) {
            this.host.unoCollapse = true; a.hasAttribute("x-uno-collapse") || a.setAttribute("x-uno-collapse", ""); a.hasAttribute("data-collapse-target") && console.warn("[data-collapse-target] is deprecated and will be removed in version 4 in favor of [x-uno-collapse-target]"); a.hasAttribute("data-collapse-group") && console.warn("[data-collapse-group] is deprecated and will be removed in version 4 in favor of [x-uno-collapse-group]");
            this.details = this.findTarget(a); this.host.addEventListener("click", this); this.host.addEventListener("keydown", this); this.host.addEventListener("collapse-open", this); this.host.addEventListener("collapse-close", this); this.details.addEventListener("keydown", function (d) { if (utils_1.Utils.IsKeyPressed(d, "Escape") || utils_1.Utils.IsKeyPressed(d, "")) b.close(); utils_1.Utils.IsKeyPressed(d, "Tab") && utils_1.Utils.FocusChild(d, b.details.querySelectorAll("li a")) }); this.setupAnimation(); this.groupCollapses(a)
        }
    }
    c.prototype.close = function () { if (this.details.classList.contains(TOGGLE_CLASS)) { var a = document.createEvent("CustomEvent"); a.initCustomEvent("collapse-close", true, true, this.details); this.host.dispatchEvent(a); this.host.focus() } }; c.prototype.open = function () { if (!this.details.classList.contains(TOGGLE_CLASS)) { var a = document.createEvent("CustomEvent"); a.initCustomEvent("collapse-open", true, true, this.details); this.host.dispatchEvent(a); this.focusFirstChild() } }; c.prototype.focusFirstChild = function () {
        var a =
            this.details.querySelector("li a"); a && a.focus()
    }; c.prototype.destroy = function () {
        var a = this; this.host.removeEventListener("collapse-open", this); this.host.removeEventListener("collapse-close", this); this.host.removeEventListener("click", this); this.host.removeEventListener("keydown", this); delete this.host.unoCollapse; this.details.removeEventListener("keydown", this); this.details.removeEventListener("uno-animation-end", this); this.details.removeEventListener("uno-animation-progress", this); if (this.groupedCollapses) {
            this.groupedCollapses.forEach(function (b) {
                b.removeEventListener("collapse-open",
                    a)
            }); this.groupedCollapses = null
        }
    }; c.prototype.handleEvent = function (a) { switch (a.currentTarget) { case this.host: switch (a.type) { case "click": this.onTitleClick(); break; case "keydown": this.onTitleKeyDown(a); break; case "collapse-open": this.onCollapseOpen(a); break; case "collapse-close": this.onCollapseClose(a) }break; case this.details: this["onDetails" + utils_1.Utils.CamelCase(a.type)](a); break; default: if (a.type === "collapse-open") this.onCollapseGroupOpen(a) } }; c.prototype.toggle = function () {
    this.details = this.findTarget(this.host);
        this.details.classList.contains(TOGGLE_CLASS) ? this.close() : this.open()
    }; c.prototype.onCollapseOpen = function (a) { a.defaultPrevented || this.animate.toggle(true) }; c.prototype.onCollapseClose = function (a) { a.defaultPrevented || this.animate.toggle(false) }; c.prototype.onCollapseGroupOpen = function (a) { a.currentTarget !== this.host && a.detail !== this.details && this.close() }; c.prototype.onTitleClick = function () { this.toggle() }; c.prototype.onTitleKeyDown = function (a) {
        if (utils_1.Utils.IsKeyPressed(a, "Enter") || utils_1.Utils.IsKeyPressed(a,
            " ")) { a.preventDefault(); this.toggle() }
    }; c.prototype.onDetailsUnoAnimationEnd = function () { var a = this.details.classList.contains(TOGGLE_CLASS); this.host.classList.remove(TOGGLE_TITLE_CLASS); a && this.host.classList.add(TOGGLE_TITLE_CLASS); this.host.setAttribute("aria-expanded", a.toString()); this.details.setAttribute("aria-expanded", a.toString()) }; c.prototype.onDetailsUnoAnimationProgress = function (a) { this.detailsSibling.style.paddingTop = Math.round(a.detail) + "px" }; c.prototype.findTarget = function (a) {
        var b;
        if (a.hasAttribute("x-uno-collapse-target")) b = document.getElementById(a.getAttribute("x-uno-collapse-target")); else if (a.hasAttribute("data-collapse-target")) b = document.getElementById(a.getAttribute("data-collapse-target")); else if (a.nextElementSibling && a.nextElementSibling.classList.contains("collapse__details")) b = a.nextElementSibling; if (!b) throw Error("Collapse cannot find collapse target"); b.hasAttribute("id") || b.setAttribute("id", utils_1.Utils.GenerateUID()); b.classList.contains(TOGGLE_CLASS) &&
            this.host.classList.add(TOGGLE_TITLE_CLASS); this.setAria(b); return b
    }; c.prototype.groupCollapses = function (a) {
        var b, d = ["x-uno-collapse-group", "data-collapse-group"], e = false; d.forEach(function (f) { if (a.hasAttribute(f)) { var g = a.getAttribute(f); b = document.querySelectorAll("[" + f + '="' + g + '"]'); e = true } }); if (!e) for (; a.parentElement && !b;) { a = a.parentElement; d.forEach(function (f) { if (a.hasAttribute(f)) b = a.querySelectorAll("[x-uno-collapse]") }) } if (b) {
        this.groupedCollapses = []; for (d = 0; d < b.length; d++) {
            this.groupedCollapses.push(b.item(d));
            b.item(d).addEventListener("collapse-open", this)
        }
        }
    }; c.prototype.setupAnimation = function () {
    this.animate = new SlideToggle_1.SlideToggle(this.details); this.animate.toggleClass = TOGGLE_CLASS; this.animate.animationDuration = 1; this.details.addEventListener("uno-animation-end", this); if (this.details.nodeName.toLowerCase() === "tr") {
        this.details.addEventListener("uno-animation-progress", this); this.detailsSibling = document.createElement("tr"); this.detailsSibling.classList.add("collapse__table-divider"); this.detailsSibling.innerHTML =
            "<td></td>"; this.details.nextElementSibling ? this.details.parentNode.insertBefore(this.detailsSibling, this.details.nextElementSibling) : this.details.parentNode.appendChild(this.detailsSibling); this.detailsSibling = this.detailsSibling.firstElementChild
    }
    }; c.prototype.setAria = function (a) {
        var b = a.classList.contains(TOGGLE_CLASS); a.setAttribute("aria-expanded", b.toString()); a.hasAttribute("role") || a.setAttribute("role", "region"); this.host.setAttribute("role", "button"); this.host.setAttribute("tabindex", "0");
        this.host.setAttribute("aria-expanded", b.toString()); this.host.setAttribute("aria-controls", a.getAttribute("id"))
    }; return c
}(); exports.Collapse = Collapse;
var INNER_COLOR = "#ffffff", GLOBAL_ALPHA_OPACITY = 0.2, DonutChart = function () {
    function c(a) { this.element = a; this._value = 0; if (a) { this.setup(); this.setupListeners() } else throw Error("No element provided"); } Object.defineProperty(c.prototype, "value", { get: function () { return this._value }, set: function (a) { if (a <= 100 && a >= 0) this._value = a; else throw Error("Value should be a percentage and therefore between (and including) 0 and 100"); }, enumerable: true, configurable: true }); c.prototype.setup = function () {
    this.canvas = this.element.getElementsByTagName("canvas")[0];
        this.ctx = this.canvas.getContext("2d"); this.setColor(); this.setSize(); this.setInner()
    }; c.prototype.setInner = function () { var a = this.element.getElementsByClassName("donut-chart__inner")[0]; if (a) { var b = Math.sqrt(Math.pow(2 * this.radius - this.arcWidth, 2) / 2); a.style.width = b + "px"; a.style.height = b + "px" } else throw Error('No element with class "donut-chart__inner" found'); }; c.prototype.setupListeners = function () { var a = this; window.addEventListener("resize", this.debounce(function () { return a.updateSize() }, 250)) };
    c.prototype.draw = function () {
        var a = this.calcOffset(), b = this.calcSwitchPoint(a), d = this.calcStartPoint(a); a = this.calcEndPoint(a); this.ctx.beginPath(); this.ctx.lineWidth = this.arcWidth; this.ctx.arc(this.xCoord, this.yCoord, this.radius, d, b); this.ctx.strokeStyle = this.color; this.ctx.stroke(); this.ctx.beginPath(); this.ctx.arc(this.xCoord, this.yCoord, this.radius, b, a); this.ctx.strokeStyle = this.color; this.ctx.globalAlpha = GLOBAL_ALPHA_OPACITY; this.ctx.stroke(); this.ctx.beginPath(); this.ctx.fillStyle = INNER_COLOR;
        this.ctx.fill()
    }; c.prototype.calcOffset = function () { return -Math.PI * 0.5 }; c.prototype.calcStartPoint = function (a) { return 0 + a }; c.prototype.calcSwitchPoint = function (a) { return this._value / 100 * Math.PI * 2 + a }; c.prototype.calcEndPoint = function (a) { return Math.PI * 2 + a }; c.prototype.setColor = function () { this.color = window.getComputedStyle(this.element).color }; c.prototype.setSize = function () {
        var a = this.canvas.clientWidth, b = window.devicePixelRatio; this.canvas.style.height = a + "px"; this.canvas.height = a * b; this.canvas.width =
            a * b; this.yCoord = a * b / 2; this.xCoord = a * b / 2; this.arcWidth = 0.1 * a * b; this.radius = a * b / 2 - this.arcWidth
    }; c.prototype.updateSize = function () { this.setSize(); this.setInner(); this.draw() }; c.prototype.destroy = function () { var a = this; window.removeEventListener("resize", this.debounce(function () { return a.updateSize() }, 250)) }; c.prototype.debounce = function (a, b) { var d; return function () { for (var e = [], f = 0; f < arguments.length; f++)e[f - 0] = arguments[f]; window.clearTimeout(d); d = window.setTimeout(function () { a.apply(void 0, e) }, b) } };
    return c
}(); exports.DonutChart = DonutChart; utils_1 = require(".//core/utils");
var RESIZE_TIMEOUT = 200, Modal = function () {
    function c(a) {
    this.element = a; this.focusableElementsString = "\n a[href],\n area[href],\n input:not([disabled]),\n select:not([disabled]),\n textarea:not([disabled]),\n button:not([disabled]),\n iframe,\n object,\n embed,\n *[tabindex],\n *[contenteditable]"; this.closeListener = this.onClose.bind(this); this.keyDownListener = this.onKeyDown.bind(this); this.resizeListener = this.onResize.bind(this);
        a.setAttribute("tabindex", "-1"); a.querySelector(".modal__close-button") && a.querySelector(".modal__close-button").addEventListener("click", this.closeListener); a.addEventListener("keydown", this.keyDownListener); window.addEventListener("resize", this.resizeListener); this.setAria()
    } c.prototype.onKeyDown = function (a) {
        if (utils_1.Utils.IsKeyPressed(a, "Escape")) { a.preventDefault(); this.close() } else if (utils_1.Utils.IsKeyPressed(a, "Tab")) {
            var b; b = Array.prototype.slice.call(this.element.querySelectorAll(this.focusableElementsString),
                0); b.sort(function (f, g) { var i = f.getAttribute("tabindex"), h = g.getAttribute("tabindex"); if (i > h) return 1; else if (i < h) return -1; return 0 }); var d; d = document.querySelector(":focus"); var e; e = b.length; d = Math.max(Array.prototype.indexOf.call(b, d), 0); if (a.shiftKey) d === 0 ? b[e - 1].focus() : b[d - 1].focus(); else d === e - 1 ? b[0].focus() : b[d + 1].focus(); a.preventDefault()
        }
    }; c.prototype.open = function () { this.previousFocus = document.activeElement; this.element.classList.add("modal--open"); this.resize(); this.setFocus() }; c.prototype.close =
        function () { this.element.classList.remove("modal--open"); this.previousFocus && this.previousFocus.focus() }; c.prototype.destroy = function () { clearTimeout(this.resizeTimeout); this.element.querySelector(".modal__close-button") && this.element.querySelector(".modal__close-button").removeEventListener("click", this.closeListener); this.element.removeEventListener("keydown", this.keyDownListener); window.removeEventListener("resize", this.resizeListener) }; c.prototype.resize = function () {
            var a = this.element.querySelector(".modal__body"),
            b = this.element.querySelector(".modal__title"), d = this.element.querySelector(".modal__footer"), e; a.style.maxHeight = "100%"; e = getComputedStyle(this.element.querySelector(".modal__content")); var f = parseInt(e.height); if (parseInt(getComputedStyle(a).height) > f) {
                e = f - parseInt(e.paddingTop) - parseInt(e.paddingBottom) - parseInt(getComputedStyle(a).marginTop) - parseInt(getComputedStyle(a).marginBottom) - 10; if (b) e -= utils_1.Utils.CalculateElementHeight(b); if (d) e -= utils_1.Utils.CalculateElementHeight(d); a.style.maxHeight =
                    e + "px"
            }
        }; c.prototype.onClose = function (a) { a.preventDefault(); this.close() }; c.prototype.onResize = function () { clearTimeout(this.resizeTimeout); this.resizeTimeout = window.setTimeout(this.resize.bind(this), RESIZE_TIMEOUT) }; c.prototype.setAria = function () { this.element.setAttribute("role", "dialog"); var a = this.element.querySelector(".modal__title h1"); if (a) { a.hasAttribute("id") || a.setAttribute("id", utils_1.Utils.GenerateUID()); this.element.setAttribute("aria-labelledby", a.getAttribute("id")) } }; c.prototype.setFocus =
            function () { for (var a, b = [".modal__body input, .modal__body textarea", ".btn--primary", ".btn", ".modal__close-button"], d = 0; d < b.length; d++)if (a = this.element.querySelector(b[d])) { a.focus(); break } }; return c
}(); exports.Modal = Modal; utils_1 = require("/core/utils");
var RESIZE_THROTTLE = 200, MOBILE_WIDTH = 544, AutoResizeNavigation = function () {
    function c(a) {
    this.host = a; this._navWidth = 0; if (!a) throw Error("host element not defined"); if (!a.classList.contains("top-nav-autoresize")) throw Error("host element should have class top-nav-autoresize"); if (!utils_1.Utils.FindParentContainingClass(a, "container", document.body)) throw Error("Autoresize navigation should be in parent with class container"); if (!a.querySelector("ul.nav")) throw Error("host element should have child ul with class nav");
        this._ul = a.querySelector("ul.nav"); this._setup()
    } c.prototype._createMoreNav = function () {
    this._moreNav = document.createElement("li"); this._moreNav.classList.add("nav__item"); this._moreNav.classList.add("nav__item--more"); this._moreNav.innerHTML = '\n <a href="#" class="nav__link nav__link--more">Meer</a>\n <ul class="nav__more"></ul>'; this._createClones(); this._ul.appendChild(this._moreNav); this._navClickListener = this._navClassToggle(this._moreNav, "nav__item--more-open").bind(this);
        this._moreNav.querySelector("a").addEventListener("click", this._navClickListener)
    }; c.prototype._navClassToggle = function (a, b) { return function (d) { d.preventDefault(); d.stopPropagation(); a.classList.toggle(b) } }; c.prototype._onWindowClick = function () { this._moreNav.classList.remove("nav__item--more-open") }; c.prototype._setup = function () {
    this.resizeListener = this._onScreenResize.bind(this); this.windowClickListener = this._onWindowClick.bind(this); window.addEventListener("resize", this.resizeListener); window.addEventListener("click",
        this.windowClickListener); this._createMoreNav(); this._storeWidths(); this._setFlexClasses(); for (var a = this._ul.querySelectorAll(".nav__item--disabled"), b = 0; b < a.length; b++)a.item(b).querySelector("a").setAttribute("tabindex", "-1"); this._rearrange()
    }; c.prototype._setFlexClasses = function () { for (var a = this.host; a.nextElementSibling;) { a = a.nextElementSibling; a.classList.add("autoresize__sibling") } for (a = this.host; a.previousElementSibling;) { a = a.previousElementSibling; a.classList.add("autoresize__sibling") } };
    c.prototype._rearrange = function () {
        this.host.classList.add("top-nav-autoresize--setup"); var a = parseInt(getComputedStyle(this._ul).width); this.host.classList.remove("top-nav-autoresize--setup"); if (document.body.offsetWidth <= MOBILE_WIDTH) a = 0; var b = this._navWidth, d = this._ul.querySelectorAll(".nav__item:not(.nav__item--clone)"), e = this._ul.querySelectorAll(".nav__item--clone"), f = d.length - 1; for (d.item(0).style.maxWidth = ""; --f > 0;) { d.item(f).classList.remove("nav__item--hidden"); e.item(f).classList.add("nav__item--hidden") } f =
            d.length - 1; for (var g = 0; b > a && --f > 0;) { var i = d.item(f), h = e.item(f); i.classList.add("nav__item--hidden"); h.classList.remove("nav__item--hidden"); g++; b -= parseInt(i.getAttribute("data-width")) } if (f === 0) { this._moreNav.querySelector(".nav__link--more").innerHTML = "MENU"; d.item(0).classList.add("nav__item--hidden"); e.item(0).classList.remove("nav__item--hidden"); this._moreNav.classList.add("nav__item--minified") } else {
                this._moreNav.querySelector(".nav__link--more").innerHTML = "Meer"; d.item(0).classList.remove("nav__item--hidden");
                e.item(0).classList.add("nav__item--hidden"); this._moreNav.classList.remove("nav__item--minified")
            } this._ul.querySelector(".nav__item--clone:not(.nav__item--hidden)") === null ? this._moreNav.classList.add("nav__item--hidden") : this._moreNav.classList.remove("nav__item--hidden")
    }; c.prototype._createClones = function () {
        for (var a = this._moreNav.querySelector("ul"), b = this._ul.querySelectorAll(".nav__item"), d = 0; d < b.length; d++) {
            var e = b.item(d).cloneNode(true); e.removeAttribute("id"); e.classList.add("nav__item--clone");
            e.classList.add("nav__item--hidden"); a.appendChild(e)
        }
    }; c.prototype._onScreenResize = function () { clearTimeout(this._resizeTimeout); this._resizeTimeout = window.setTimeout(this._rearrange.bind(this), RESIZE_THROTTLE) }; c.prototype._storeWidths = function () {
        this.host.classList.add("top-nav-autoresize--setup"); for (var a = this._ul.querySelectorAll(".nav__item:not(.nav__item--clone)"), b = 0; b < a.length; b++) {
            var d = a.item(b), e = Math.ceil(parseFloat(getComputedStyle(d).width)); e += Math.ceil(parseFloat(getComputedStyle(d).marginLeft));
            e += Math.ceil(parseFloat(getComputedStyle(d).marginRight)); this._navWidth += e; d.setAttribute("data-width", e.toString())
        } this.host.classList.remove("top-nav-autoresize--setup")
    }; c.prototype.destroy = function () { window.removeEventListener("resize", this.resizeListener); window.removeEventListener("click", this.windowClickListener); this._moreNav.querySelector("a").removeEventListener("click", this._navClickListener) }; return c
}(); exports.AutoResizeNavigation = AutoResizeNavigation;
var SubMenuNavigation = function () {
    function c(a) {
    this.host = a; if (!a) throw Error("host element not defined"); if (!a.classList.contains("nav--submenu")) throw Error("host element should have class nav--submenu"); if (!utils_1.Utils.FindParentContainingClass(a, "container", document.body)) throw Error("Submenu navigation should be in parent with class container"); if (!a.querySelector("li.nav__item--parent")) throw Error("host element should have child li with class nav__item--parent"); a = a.querySelectorAll(".nav__item--parent");
        for (var b = 0; b < a.length; b++) {
            var d = a.item(b); if (!d.querySelector("a.nav__link--parent")) throw Error("host element should have child a with class nav__link--parent"); if (!d.querySelector("ul.nav__submenu")) throw Error("host element should have child ul with class nav__submenu"); this._navClickListener = this._navClassToggle(d, "nav__item--parent-open").bind(this); d.querySelector("a").addEventListener("click", this._navClickListener); this.windowClickListener = this._navClassRemove(d, "nav__item--parent-open").bind(this);
            window.addEventListener("click", this.windowClickListener)
        }
    } c.prototype._navClassToggle = function (a, b) { return function (d) { d.preventDefault(); d.stopPropagation(); a.classList.toggle(b) } }; c.prototype._navClassRemove = function (a, b) { return function () { a.classList.remove(b) } }; c.prototype.destroy = function () { for (var a = this.host.querySelectorAll(".nav__item--parent"), b = 0; b < a.length; b++)a.item(b).querySelector("a").removeEventListener("click", this._navClickListener); window.removeEventListener("click", this.windowClickListener) };
    return c
}(); exports.SubMenuNavigation = SubMenuNavigation; var Notification = function () { function c(a) { this.element = a } c.prototype.close = function () { this.element.parentNode.removeChild(this.element) }; return c }(); exports.Notification = Notification;
var TableResponsive = function () { return function (c) { this.table = c; var a = c.querySelectorAll("thead tr:first-child th"), b = [], d = c.querySelectorAll("tbody tr"); c.classList.add("table--responsive"); for (c = 0; c < a.length; c++)b.push(a.item(c).textContent); for (c = 0; c < d.length; c++) { a = d.item(c).querySelectorAll("td"); if (a.length === b.length) for (var e = 0; e < a.length; e++)a.item(e).setAttribute("data-col", b[e]) } } }(); exports.TableResponsive = TableResponsive; utils_1 = require(".//core/utils"); RESIZE_THROTTLE = 200;
var Tabs = function () {
    function c(a) { this.host = a; this._tabsWidth = 0; if (!a) throw Error("Host element not supplied"); this._tabs = a.querySelectorAll(".tab__tab a"); if (this._tabs.length === 0) throw Error("No tabs found in host element"); this.setup() } Object.defineProperty(c.prototype, "activeTabIndex", { get: function () { for (var a, b = 0; b < this._tabs.length; b++)if (this._tabs.item(b).parentElement.classList.contains("tab__tab--active")) { a = b; break } return a }, enumerable: true, configurable: true }); c.deactivatePanes = function (a) {
        a =
        a.querySelectorAll(".tab__pane"); for (var b = 0; b < a.length; b += 1)a.item(b).classList.remove("tab__pane--active")
    }; c.deactivateTabs = function (a) { a = a.querySelectorAll(".tab__tab--active"); if (a.length > 0) for (var b = 0; b < a.length; b++) { var d = a.item(b); d.querySelector("a").setAttribute("tabindex", "-1"); d.classList.remove("tab__tab--active"); d.setAttribute("aria-selected", "false") } }; c.getTargetPane = function (a) { a = a.getAttribute("href").substr(1); return document.getElementById(a) }; c.prototype.destroy = function () {
        window.removeEventListener("resize",
            this); this._tabs = this.host.querySelectorAll(".tab__tab a"); for (var a = 0; a < this._tabs.length; a++)this._tabs.item(a).removeEventListener("click", this)
    }; c.prototype.disableTab = function (a) { if (a === this.activeTabIndex) throw Error("Cannot disable active tab since it's active"); else this.toggleEnabled(a, false) }; c.prototype.enableTab = function (a) { this.toggleEnabled(a, true) }; c.prototype.handleEvent = function (a) { if (a.currentTarget === window && a.type === "resize") this.onScreenResize(); else if (a.currentTarget.parentElement.classList.contains("tab__tab")) this.onTabClick(a) };
    c.prototype.openTab = function (a) { if (a >= 0 && a < this._tabs.length - 1) this.setActiveTab(this._tabs.item(a)); else throw Error("Tab index " + a + " is out of bounds"); }; c.prototype.canBeActivated = function (a) { if (a.classList.contains("tab__tab--more")) { a.classList.toggle("tab__tab--more-open"); return false } else this._moreTab.classList.remove("tab__tab--more-open"); return !a.classList.contains("tab__tab--disabled") }; c.prototype.createClones = function () {
        for (var a = this._moreTab.querySelector("ul"), b = this.host.querySelectorAll(".tab__tab"),
            d = 0; d < b.length; d++) { var e = b.item(d).cloneNode(true); e.removeAttribute("id"); e.classList.add("tab__tab--clone"); e.classList.add("tab__tab--hidden"); a.appendChild(e) }
    }; c.prototype.createMoreTab = function () { this._moreTab = utils_1.Utils.CreateNode('<li class="tab__tab tab__tab--more">\n <a href=""><span class="tab__more-link">Meer</span></a>\n <ul class="tab__more"></ul>\n </li>'); this.createClones(); this.host.appendChild(this._moreTab) }; c.prototype.onScreenResize =
        function () { clearTimeout(this._resizeTimeout); this._resizeTimeout = window.setTimeout(this.rearrange.bind(this), RESIZE_THROTTLE) }; c.prototype.onTabClick = function (a) { a.preventDefault(); this.setActiveTab(a.currentTarget) }; c.prototype.keyboardSwitchTabs = function (a) { if (a.key === "ArrowLeft") (a = this.getPreviousTab()) && this.setActiveTab(a); else if (a.key === "ArrowRight") (a = this.getNextTab()) && this.setActiveTab(a) }; c.prototype.rearrange = function () {
            var a = parseInt(getComputedStyle(this.host).width), b = this._tabsWidth,
            d = this.host.querySelectorAll(".tab__tab:not(.tab__tab--clone)"), e = this.host.querySelectorAll(".tab__tab--clone"), f = d.length - 1; for (d.item(0).style.maxWidth = ""; --f > 0;) { d.item(f).classList.remove("tab__tab--hidden"); e.item(f).classList.add("tab__tab--hidden") } for (f = d.length - 1; b > a && --f > 0;) { var g = d.item(f), i = e.item(f); g.classList.add("tab__tab--hidden"); i.classList.remove("tab__tab--hidden"); b -= parseInt(g.getAttribute("data-width")) } if (f === 0) {
                a -= parseInt(this._moreTab.getAttribute("data-width")); d.item(0).style.maxWidth =
                    a + "px"
            } this.host.querySelector(".tab__tab--clone:not(.tab__tab--hidden)") === null ? this._moreTab.classList.add("tab__tab--hidden") : this._moreTab.classList.remove("tab__tab--hidden")
        }; c.prototype.setup = function () {
            window.addEventListener("resize", this); this.createMoreTab(); this.storeWidths(); this._tabs = this.host.querySelectorAll(".tab__tab a"); for (var a = this.host.querySelectorAll(".tab__tab--disabled"), b = 0; b < a.length; b++)a.item(b).setAttribute("disabled", ""); a = this.host.querySelector(".tab__tab--active a");
            for (b = 0; b < this._tabs.length; b++) { this._tabs.item(b).addEventListener("click", this); this._tabs.item(b).addEventListener("keyup", this.keyboardSwitchTabs.bind(this)); this._tabs.item(b).setAttribute("tabindex", "-1") } this.setActiveTab(a || this._tabs.item(0)); this.rearrange()
        }; c.prototype.getTabElement = function (a, b, d) { return (a[d].classList.contains("tab__tab--hidden") ? b[d] : a[d]).firstChild }; c.prototype.getNextTab = function () {
            var a = this.host.querySelectorAll(".tab__tab:not(.tab__tab--clone):not(.tab__tab--more)"),
            b = this.host.querySelectorAll(".tab__tab--clone"), d = this.activeTabIndex + 1; for (d = d < a.length ? d : 0; d < a.length; d += 1)if (this.canBeActivated(utils_1.Utils.FindParentContainingClass(a.item(d), "tab__tab", this.host))) return this.getTabElement(a, b, d); return null
        }; c.prototype.getPreviousTab = function () {
            var a = this.host.querySelectorAll(".tab__tab:not(.tab__tab--clone )"), b = this.host.querySelectorAll(".tab__tab--clone"), d = this.activeTabIndex - 1; for (d = d >= 0 ? d : a.length - 1; d >= 0; d -= 1)if (this.canBeActivated(utils_1.Utils.FindParentContainingClass(a.item(d),
                "tab__tab", this.host))) return this.getTabElement(a, b, d); return null
        }; c.prototype.setActiveTab = function (a) {
            var b = c.getTargetPane(a), d = utils_1.Utils.FindParentContainingClass(a, "tab__tab", this.host); if (this.canBeActivated(d)) {
                c.deactivateTabs(this.host); c.deactivatePanes(utils_1.Utils.FindParentContainingClass(b.parentElement, "tab__content", this.host)); for (var e = this.host.querySelectorAll('a[href="' + a.getAttribute("href") + '"]'), f = 0; f < e.length; f++) {
                    d = utils_1.Utils.FindParentContainingClass(e.item(f),
                        "tab__tab", this.host); e.item(f).removeAttribute("tabindex"); d.classList.add("tab__tab--active"); d.setAttribute("aria-selected", "true"); d.parentElement.classList.contains("tab__more") && !d.classList.contains("tab__tab--hidden") && this._moreTab.classList.add("tab__tab--more-open")
                } a.focus(); b.classList.add("tab__pane--active")
            }
        }; c.prototype.storeWidths = function () {
            this.host.classList.add("tab--setup"); for (var a = this.host.querySelectorAll(".tab__tab:not(.tab__tab--clone)"), b = 0; b < a.length; b++) {
                var d = a.item(b),
                e = Math.ceil(parseFloat(getComputedStyle(d).width)); e += Math.ceil(parseFloat(getComputedStyle(d).marginLeft)); e += Math.ceil(parseFloat(getComputedStyle(d).marginRight)); this._tabsWidth += e; d.setAttribute("data-width", e.toString())
            } this.host.classList.remove("tab--setup")
        }; c.prototype.toggleEnabled = function (a, b) {
            if (a >= 0 && a < this._tabs.length - 1) {
                var d = this.host.querySelectorAll(".tab__tab:not(.tab__tab--clone)"), e = this.host.querySelectorAll(".tab__tab--clone"), f = b ? "remove" : "add"; if (b) {
                    d.item(a).removeAttribute("disabled");
                    e.item(a).removeAttribute("disabled")
                } else { d.item(a).setAttribute("disabled", ""); e.item(a).setAttribute("disabled", "") } d.item(a).classList[f]("tab__tab--disabled"); d.item(a).querySelector("a").setAttribute("tabindex", b ? (0).toString() : (-1).toString()); e.item(a).classList[f]("tab__tab--disabled"); e.item(a).querySelector("a").setAttribute("tabindex", b ? (0).toString() : (-1).toString())
            } else throw Error("Tab index " + a + " is out of bounds");
        }; return c
}(); exports.Tabs = Tabs;
var ARROW_HEIGHT = 15, MOBILE_BREAKPOINT = 768, TOOLTIP = '\n<div class="tooltip" hidden x-uno-tooltip-window>\n <div class="tooltip__backdrop"></div>\n <div class="tooltip__window">\n <div class="tooltip__body" role="status"></div>\n <div class="tooltip__footer" tabindex="0">\n <button class="tooltip__close-button"><span class="icon icon-cross" role="presentation"></span>sluit</button>\n </div>\n </div>\n</div>', Tooltip = function () {
    function c(a) {
    this.host = a; this.isHover =
        false; this.hostEvents = []; if (!a.hasAttribute("title")) throw Error("Tooltip is missing a title attribute"); this._content = a.getAttribute("title"); a.removeAttribute("title"); a.classList.add("tooltip-trigger"); this.stylesheet = this.createStyleSheet().sheet; var b = document.createElement("div"); b.innerHTML = TOOLTIP; b.setAttribute("aria-live", "polite"); this.container = b.firstElementChild; this._parent = b; this._parent.classList.add("tooltip__parent"); this._tooltip = this.container.querySelector(".tooltip__window");
        b = this.container.querySelector(".tooltip__close-button"); this.setHover(); this.addListener(a, "click", this.onHostClick.bind(this)); this.addListener(a, "mouseover", this.onHostMouseOver.bind(this)); this.addListener(a, "mouseout", this.onHostMouseOut.bind(this)); this.addListener(a, "focus", this.onFocus.bind(this)); this.addListener(a, "blur", this.onBlur.bind(this)); this.addListener(b, "click", this.onClick.bind(this)); a.parentNode.insertBefore(this._parent, a.nextSibling)
    } Object.defineProperty(c.prototype, "content",
        { get: function () { return this._content }, set: function (a) { this._content = a ? a : "" }, enumerable: true, configurable: true }); c.prototype.setContent = function () { var a = this.container.querySelector(".tooltip__body"); if (a) a.innerHTML = this._content }; c.prototype.setHover = function () { this.openOnHover = window.matchMedia("(min-width: 768px)").matches ? true : false }; c.prototype.onClick = function () { this.hide() }; c.prototype.onHostClick = function () { if (!this.openOnHover) { this.isHover = false; this.show() } }; c.prototype.onFocus = function () { this.show() };
    c.prototype.onBlur = function () { this.hide() }; c.prototype.onHostMouseOver = function (a) { if (this.openOnHover) { this.isHover = true; this.show() } else a.preventDefault() }; c.prototype.onHostMouseOut = function (a) { if (this.openOnHover) this.isHover && this.hide(); else a.preventDefault() }; c.prototype.destroy = function () { this.hide(); this.hostEvents.forEach(function (a) { a.element.removeEventListener(a.event, a.listener) }); this.hostEvents = [] }; c.prototype.hide = function () {
        this.container.classList.remove("tooltip--open"); this.container.setAttribute("hidden",
            ""); window.matchMedia("(min-width: 768px)").matches || document.querySelector("body").classList.remove("no-scroll"); this.isHover = false
    }; c.prototype.show = function () {
        for (var a = document.querySelectorAll(".tooltip--open"), b = 0; b < a.length; b++)for (var d = a[b]; d.classList.contains("tooltip--open");)d.classList.remove("tooltip--open"); this.container.classList.add("tooltip--open"); this.container.removeAttribute("hidden"); this.setContent(); a = this.positionElement(this.host, this._tooltip); this._tooltip.classList.remove("tooltip__window--top");
        this._tooltip.classList.remove("tooltip__window--bottom"); this._tooltip.classList.add("tooltip__window--" + a); this._tooltip.classList.add("tooltip__window--animate"); this._tooltip.classList.add("tooltip__window--show"); this.openOnHover || this._tooltip.querySelector(".tooltip__close-button").focus(); window.matchMedia("(min-width: 768px)").matches || document.querySelector("body").classList.add("no-scroll")
    }; c.prototype.createStyleSheet = function () {
        var a = document.querySelector("style[x-uno-tooltip-stylesheet]");
        if (!a) { a = document.createElement("style"); a.setAttribute("x-uno-tooltip-stylesheet", ""); document.head.appendChild(a) } return a
    }; c.prototype.positionElement = function (a, b) {
        if (window.innerWidth > MOBILE_BREAKPOINT) {
            this.stylesheet.rules && this.stylesheet.rules.length > 0 && this.stylesheet.removeRule(0); var d = parseInt(getComputedStyle(b).height), e = parseInt(getComputedStyle(b).width), f = document.body.getBoundingClientRect(), g = a.getBoundingClientRect(), i = "top", h = -g.width / 2 - e / 2, j = -d - ARROW_HEIGHT - 20; if (g.top - d < 10) {
                j =
                g.height; i = "bottom"
            } if (g.right + h < 0) { d = -g.right - h; h = 20 + h + d; this.stylesheet.insertRule(".tooltip__window::before { left: " + (135 - d - 20) + "px }", 0) } else if (g.right + h + e > f.width) { d = f.width - g.right - e - h; h = h + d - 10; this.stylesheet.insertRule(".tooltip__window::before { left: " + (135 - d + 10) + "px }", 0) } b.style.left = Math.round(h) + "px"; b.style.top = Math.round(j) + "px"; return i
        }
    }; c.prototype.addListener = function (a, b, d) { this.hostEvents.push({ element: a, event: b, listener: d }); a.addEventListener(b, d) }; return c
}();
exports.Tooltip = Tooltip;
