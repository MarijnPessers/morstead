{"version":3,"file":"SlideToggle.js","sourceRoot":"","sources":["../../../../../../../src/core/animations/SlideToggle.ts"],"names":["SlideToggle","SlideToggle.constructor","SlideToggle.toggleClass","SlideToggle.toggle","SlideToggle.start","SlideToggle.progress","SlideToggle.end","SlideToggle.setMaxHeight"],"mappings":"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","sourcesContent":["import {Animation} from './Animation';\r\n\r\n/**\r\n * Animation class which adds a slide-toggle effect to the supplied element\r\n * Example:\r\n * <code>\r\n *     var animation = new SlideToggle(document.getElementById('target'));\r\n *     animation.toggle();\r\n * </code>\r\n */\r\nexport class SlideToggle extends Animation {\r\n\r\n    private elementHeight: number;\r\n\r\n    private _toggleClass: string = 'animate--open';\r\n\r\n    constructor(protected element: HTMLElement) {\r\n        super(element);\r\n    }\r\n\r\n    /**\r\n     * Class which gets applied when the element is 'toggled'\r\n     * @default 'animate--open'\r\n     * @returns {string}\r\n     */\r\n    get toggleClass(): string {\r\n        return this._toggleClass;\r\n    }\r\n\r\n    set toggleClass(value: string) {\r\n        this._toggleClass = value;\r\n    }\r\n\r\n    /**\r\n     * Toggles the element, animates between height = 0 and the calculated\r\n     * height of the element. When the previous animation hasn't finished yet,\r\n     * it will animate from the point where the previous animation stopped.\r\n     *\r\n     * @return boolean The state to transform to (toggled or not)\r\n     */\r\n    public toggle(force: boolean = undefined): boolean {\r\n        this.setMaxHeight();\r\n        this.initialValue = parseInt(this.element.style.maxHeight);\r\n        this.initialValue = isNaN(this.initialValue) ? 0 : this.initialValue;\r\n\r\n        let toggled: boolean = this.element.classList.toggle(this.toggleClass);\r\n\r\n        // No IE support for 2nd param for toggle :(\r\n        if (force === true) {\r\n            this.element.classList.add(this.toggleClass);\r\n            toggled = force;\r\n        } else if (force === false) {\r\n            this.element.classList.remove(this.toggleClass);\r\n            toggled = force;\r\n        }\r\n\r\n        // Remove the maxHeightProperty to correctly calculate the height\r\n        // Round up a float to prevent missing that one pixel at the bottom\r\n        this.element.style.maxHeight = '';\r\n        this.elementHeight = toggled ? Math.ceil(parseFloat(getComputedStyle(this.element).height)) : 0;\r\n\r\n        this.start();\r\n\r\n        return toggled;\r\n    }\r\n\r\n    start(): void {\r\n        this.element.style.maxHeight = this.initialValue + 'px';\r\n        this.element.classList.add(this.toggleClass);\r\n        this.delta = this.elementHeight - this.initialValue;\r\n        super.start();\r\n    }\r\n\r\n    progress(): void {\r\n        super.progress();\r\n        this.element.style.maxHeight = Math.floor(this.value) + 'px';\r\n    }\r\n\r\n    end(): void {\r\n        if (Math.floor(this.value) === 0) {\r\n            this.element.classList.remove(this.toggleClass);\r\n        }\r\n\r\n        this.element.style.maxHeight = '';\r\n        super.end();\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * Sets the maxHeight property to the initial height.\r\n     */\r\n    private setMaxHeight(): void {\r\n        this.element.style.maxHeight = '';\r\n        let toggled: boolean = this.element.classList.contains(this._toggleClass),\r\n            height: number = toggled ? parseInt(getComputedStyle(this.element).height) : 0;\r\n\r\n        this.element.style.maxHeight = height + 'px';\r\n    }\r\n}\r\n"]}