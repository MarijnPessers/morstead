{"version":3,"file":"button.js","sourceRoot":"","sources":["../../../../../../../src/components/button/button.ts"],"names":["Button","Button.constructor","Button.destroy","Button.onKeyDown"],"mappings":"AAAA;;;;;;;;;GASG;AACH,sBAAoB,kBAAkB,CAAC,CAAA;AAEvC;IAIIA,gBAAoBA,OAAoBA;QAApBC,YAAOA,GAAPA,OAAOA,CAAaA;QACpCA,IAAIA,CAACA,eAAeA,GAAGA,IAAIA,CAACA,SAASA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;QACjDA,OAAOA,CAACA,gBAAgBA,CAACA,SAASA,EAAEA,IAAIA,CAACA,eAAeA,CAACA,CAACA;QAC1DA,OAAOA,CAACA,YAAYA,CAACA,MAAMA,EAAEA,QAAQA,CAACA,CAACA;QAEvCA,EAAEA,CAACA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,SAASA,CAACA,QAAQA,CAACA,eAAeA,CAACA,CAACA,CAACA,CAACA;YACpDA,OAAOA,CAACA,YAAYA,CAACA,UAAUA,EAAEA,GAAGA,CAACA,CAACA;QAC1CA,CAACA;IACLA,CAACA;IAEDD;;OAEGA;IACHA,wBAAOA,GAAPA;QACIE,IAAIA,CAACA,OAAOA,CAACA,mBAAmBA,CAACA,SAASA,EAAEA,IAAIA,CAACA,eAAeA,CAACA,CAACA;IACtEA,CAACA;IAEOF,0BAASA,GAAjBA,UAAkBA,KAAoBA;QAClCG,EAAEA,CAACA,CAACA,aAAKA,CAACA,YAAYA,CAACA,KAAKA,EAAEA,GAAGA,CAACA,CAACA,CAACA,CAACA;YACjCA,KAAKA,CAACA,cAAcA,EAAEA,CAACA;YAEvBA,EAAEA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,SAASA,CAACA,QAAQA,CAACA,eAAeA,CAACA,CAACA,CAACA,CAACA;gBACnDA,MAAMA,CAACA;YACXA,CAACA;YAEDA,EAAEA,CAACA,CAACA,OAAOA,IAAIA,CAACA,OAAOA,CAACA,KAAKA,KAAKA,UAAUA,CAACA,CAACA,CAACA;gBAC3CA,IAAIA,CAACA,OAAOA,CAACA,KAAKA,EAAEA,CAACA;YACzBA,CAACA;YAACA,IAAIA,CAACA,CAACA;gBACJA,qDAAqDA;gBACrDA,IAAIA,UAAUA,GAAeA,IAAIA,UAAUA,CAACA,OAAOA,EAAEA;oBACjDA,OAAOA,EAAEA,IAAIA;oBACbA,UAAUA,EAAEA,KAAKA;oBACjBA,IAAIA,EAAEA,MAAMA;iBACfA,CAACA,CAACA;gBAEHA,IAAIA,CAACA,OAAOA,CAACA,aAAaA,CAACA,UAAUA,CAACA,CAACA;YAE3CA,CAACA;QAELA,CAACA;IACLA,CAACA;IACLH,aAACA;AAADA,CAACA,AA7CD,IA6CC;AA7CY,cAAM,SA6ClB,CAAA","sourcesContent":["/**\r\n * Adds a11y attributes to a link which is styled as a button. Normally, links\r\n * are triggered with the [ENTER] key, while buttons as triggered with the\r\n * [SPACE] key. This scripts makes sure that links can also be triggered using\r\n * the [SPACE] key. Since there are no visual clues that the element is actually\r\n * an a element, rather than a button element, we have to mimic the behaviour of\r\n * the button element.\r\n *\r\n * @see https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_button_role\r\n */\r\nimport {Utils} from '../../core/utils';\r\n\r\nexport class Button {\r\n\r\n    private keyDownListener: EventListenerObject;\r\n\r\n    constructor(private element: HTMLElement) {\r\n        this.keyDownListener = this.onKeyDown.bind(this);\r\n        element.addEventListener('keydown', this.keyDownListener);\r\n        element.setAttribute('role', 'button');\r\n\r\n        if (!this.element.classList.contains('btn--disabled')) {\r\n            element.setAttribute('tabindex', '0');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes all references to allow GC\r\n     */\r\n    destroy(): void {\r\n        this.element.removeEventListener('keydown', this.keyDownListener);\r\n    }\r\n\r\n    private onKeyDown(event: KeyboardEvent): void {\r\n        if (Utils.IsKeyPressed(event, ' ')) {\r\n            event.preventDefault();\r\n\r\n            if (this.element.classList.contains('btn--disabled')) {\r\n                return;\r\n            }\r\n\r\n            if (typeof this.element.click === 'function') {\r\n                this.element.click();\r\n            } else {\r\n                // Fallback for browsers which don't support click();\r\n                let clickEvent: MouseEvent = new MouseEvent('click', {\r\n                    bubbles: true,\r\n                    cancelable: false,\r\n                    view: window\r\n                });\r\n\r\n                this.element.dispatchEvent(clickEvent);\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n"]}