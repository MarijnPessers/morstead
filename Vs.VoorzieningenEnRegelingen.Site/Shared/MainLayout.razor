@using Redbus
@using Redbus.Events
@inherits LayoutComponentBase
@implements IDisposable
@inject IJSRuntime JSRuntime

<AdminLTENavbar></AdminLTENavbar>

<AdminLTEMainSidebar></AdminLTEMainSidebar>

<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper" style="padding:0px;border:0px">
    <!-- Main content -->
    @Body
    <!-- /.content -->
</div>
<!-- /.content-wrapper -->
@code {

    SubscriptionToken token;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            JSRuntime.InvokeAsync<object>("console.log", new object[] { $"Oninitalized" });
            token = Startup.Bus.Subscribe<PayloadEvent<string>>(s =>
            {
                JSRuntime.InvokeAsync<object>("console.log", new object[] { $"Timer event #{s.Payload}" });
            });
            SetTimer();

        }
        return base.OnAfterRenderAsync(firstRender);
    }


    private System.Timers.Timer aTimer;
    private long count;

    private void SetTimer()
    {
        // Create a timer with a two second interval.
        aTimer = new System.Timers.Timer(10000);
        // Hook up the Elapsed event for the timer.
        aTimer.Elapsed += OnTimedEvent;
        // aTimer.AutoReset = true;
        aTimer.Enabled = true;
    }

    public void Dispose()
    {
        if (token == null)
            return;
        aTimer.Stop();
        aTimer.Dispose();
        Startup.Bus.Unsubscribe(token);
    }

    private void OnTimedEvent(Object source, ElapsedEventArgs e)
    {
        count++;
        Startup.Bus.Publish(new PayloadEvent<string>($"Timed Event {count}"));
    }
}