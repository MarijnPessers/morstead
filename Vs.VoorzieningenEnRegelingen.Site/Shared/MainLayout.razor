@using Redbus.Interfaces
@inherits LayoutComponentBase
@implements IDisposable
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IEventBus Bus
<AdminLTENavbar></AdminLTENavbar>

<AdminLTEMainSidebar></AdminLTEMainSidebar>

<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper" style="padding:0px;border:0px">
    <!-- Main content -->
    @Body
    <!-- /.content -->
</div>
<!-- /.content-wrapper -->
@code {

    SubscriptionToken token;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        var authState = AuthenticationStateProvider.GetAuthenticationStateAsync().Result;
        var user = authState.User;
        if (token == null && user.Identity.IsAuthenticated)
        {
            JSRuntime.InvokeAsync<object>("console.log", new object[] { $"Oninitalized" });
            token = Bus.Subscribe<PayloadEvent<string>>(s =>
            {
                JSRuntime.InvokeAsync<object>("console.log", new object[] { $"Timer event #{s.Payload}" });
                JSRuntime.InvokeAsync<object>("notify", new object[] { $"Timer event #{s.Payload}" });
            });
            SetTimer();

        }
        return base.OnAfterRenderAsync(firstRender);
    }

    private static System.Timers.Timer aTimer;
    private static long count;

    private void SetTimer()
    {

        if (aTimer != null)
            return;
        // Create a timer with a two second interval.
        aTimer = new System.Timers.Timer(10000);
        // Hook up the Elapsed event for the timer.
        aTimer.Elapsed += OnTimedEvent;
        // aTimer.AutoReset = true;
        aTimer.Enabled = true;
    }

    // TODO: Other way to manage the lifecycle than on componentlevel?
    public void Dispose()
    {
        if (token == null)
            return;
        Bus.Unsubscribe(token);
    }

    private void OnTimedEvent(Object source, ElapsedEventArgs e)
    {
        count++;
        Bus.Publish(new PayloadEvent<string>($"Timed Event {count}"));
    }
}